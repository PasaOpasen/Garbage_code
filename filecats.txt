import imutils
import argparse
import cv2
import difflib
import binascii
import os
import sys
import json
from blur_detector import detect_blur_fft
import numpy as np
from PIL import Image
import os



def CalcImageHash(image_name):
    image = cv2.imread(image_name)  # Прочитаем картинку
    resized = cv2.resize(image, (8, 8), interpolation=cv2.INTER_AREA)  # Уменьшим картинку
    gray_image = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)  # Переведем в черно-белый формат
    avg = gray_image.mean()  # Среднее значение пикселя
    ret, threshold_image = cv2.threshold(gray_image, avg, 255, 0)  # Бинаризация по порогу

    # Рассчитаем хэш
    _hash = ""
    for x in range(8):
        for y in range(8):
            val = threshold_image[x, y]
            if val == 255:
                _hash = _hash + "1"
            else:
                _hash = _hash + "0"
    return _hash


def blurik(image_name):
    image = cv2.imread(image_name)
    width, height = image.shape[:2]
    if height > width:
        center = (width // 2, height // 2)
        i = cv2.warpAffine(image, cv2.getRotationMatrix2D(center, 90, 1.0), (width, height))
        gray = cv2.cvtColor(i, cv2.COLOR_BGR2GRAY)
        th, threshed = cv2.threshold(gray, 110, 360, cv2.THRESH_BINARY_INV)
        kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (11, 11))
        morphed = cv2.morphologyEx(threshed, cv2.MORPH_CLOSE, kernel)
        cnts = cv2.findContours(morphed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)[-2]
        cnt = sorted(cnts, key=cv2.contourArea)[-1]
        x, y, w, h = cv2.boundingRect(cnt)
        dst = i[y:y + h, x:x + w]
        img = cv2.imwrite("0.jpg", dst)
        file, ext = os.path.splitext("0.jpg")
        im = Image.open("0.jpg")
        new_path = file + "_.jpg"
        (width, height) = im.size
        if height >= width:
            box = (0, 10, 400, 1000)
        else:
            box = (0, 0, 100, height)
        region = im.crop(box)
        region.save(new_path, "JPEG")
        i = cv2.imread("0_.jpg")
    else:
        i = image
    gray = cv2.cvtColor(imutils.resize(i, width=500), cv2.COLOR_BGR2GRAY)
    mean = detect_blur_fft(gray, size=60, thresh=27, vis=-1 > 0)
    resized = cv2.resize(i, (8, 8), interpolation=cv2.INTER_AREA)  # Уменьшим картинку
    gray_image = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)  # Переведем в черно-белый формат
    Dr_Xenon = gray_image[-1::].mean()
    print(mean[0])
    print(Dr_Xenon)
    Dr_Xenon = ((Dr_Xenon > 100) << 0) | ((mean[0] > 15) << 1)
    if Dr_Xenon == 1:
        Dr_Xenon = 0b0
    return Dr_Xenon


def CompareHash(hash1, hash2):
    l = len(hash1)
    i = 0
    count = 0
    while i < l:
        if hash1[i] != hash2[i]:
            count = count + 1
        i = i + 1
    return count


def GorgoN(image_name):
    hb = {}
    hash1 = CalcImageHash(image_name)
    hash1 = ("{0:0>4X}".format(int(hash1, 2)))
    hb.update({"blur": blurik(image_name), "hash": hash1})
    return hb


if __name__ == "__main__":
    print(GorgoN(sys.argv[1]))

